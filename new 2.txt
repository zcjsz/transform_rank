Raw Data
Aggregation




"replacement": {
    [
    "Oper": {
        "name": "Operation",
        "new": true,
        "data": {
            "6820": "FT",
            "6824": "FT2",
            "6905": "SLT",
            "6911": "CESLT",
            "7903": "FT-FUSE"
        }
    }
    ]
},


Rank
group_by: UnitID
sort_by: StartTestTime
rank: F, L, FL, 1, 2, 3 ...


change column
- change column name
- change column data


new column
- column name
- column value
  - copy column data
  - fill fixed value
  - fill expression value
  - fill value by condition


add column
{
  action: add / modify
  column_name: "ABC"
  copy_from: column_name
  fill_value: "123" / 123
  fill_value_expr: 1+2+3 / col.data+100
  fill_value_cond: {
    condition1: {
                  condition: (col1.data == "A" && col2.data == 123) || col3.data == "B"  ////  (col1.data == "A" && (col2.data+100) > 123) || col3.data == "B"
                  value: val
                },
                
    condition2: {
                  condition: (col1.data == "A" && col2.data == 123) || col3.data == "B"  ////  (col1.data == "A" && (col2.data+100) > 123) || col3.data == "B"
                  value: val
                }
  }
}


http://localhost:5601/qxo/api/reporting/jobs/deleteJobs


{
  "size": 0,
  "query": {
    "bool": {
      "filter": {
        "term": {
          "Type": "Unit"
        }
      }
    }
  },
  "aggs": {
    "Operation": {
      "terms": {
        "field": "Operation",
        "size": 10
      },
      "aggs": {
        "LotNumber": {
          "terms": {
            "field": "LotNumber",
            "size": 10
          },
          "aggs": {
            "TestTime": {
              "avg": {
                "field": "TestTime"
              }
            }
          }
        }
      }
    }
  }
}



const client = elasticsearch.Client({
  host: 'http://localhost:9200',
  // host: {
  //   protocol: 'http',
  //   host: 'localhost',
  //   port: 5601,
  //   path: '/hut/elasticsearch',
  //   headers: {
  //     Accept: 'application/json, text/plain, */*',
  //     "kbn-xsrf": 'kibana'
  //   }
  // },
  // log: 'trace',
});


{
  "_source": [
    "LotNumber",
    "Operation",
    "UnitId",
    "StartTestTime"
  ],
  "size": 10000,
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "FileTime": {
              "gte": "2018-10-01",
              "lte": "2019-01-01"
            }
          }
        },
        {
          "term": {
            "Type": "Unit"
          }
        }
      ]
    }
  }
}




// const client = elasticsearch.Client({
//   host: 'http://localhost:9200',
//   // host: {
//   //   protocol: 'http',
//   //   host: 'localhost',
//   //   port: 5601,
//   //   path: '/hut/elasticsearch',
//   //   headers: {
//   //     Accept: 'application/json, text/plain, */*',
//   //     "kbn-xsrf": 'kibana'
//   //   }
//   // },
//   log: 'trace',
// });


// const msearch = (params) => {
//   es.msearch({body: params.body}, function(error, response){
//     if(error) {
//       resolve({
//         error: error,
//         html: display_error("Elasticsearch Query Error (See Console): <br\>" + error.response)
//       });
//     } else {
//       const formula = vis.params.formula;
//       const bindme = {};
//       if (options.allow_unsafe) {
//         try {
//           let metadata = JSON.parse(vis.params.meta);
//           let query_config = metadata.query_config ? metadata.query_config : null;
//           resolve({
//             formula: formula,
//             config: query_config,
//             response: response,
//             validQueryFlag: params.validQueryFlag
//           });
//         } catch (jserr) {
//           resolve({
//             error: jserr,
//             html: display_error("Meta Data Error (See Console): <br\>" + jserr)
//           });
//         }
//       } else {
//         resolve({ html: $sanitize(Mustache.render(formula, bindme)) });
//       }
//     }
//   });
// };

//
//
// const scrollSearch = async (query) => {
//   console.log('==== query ====', query);
//   let hits = [];
//   let response;
//   const response1 = await axios({
//     method: 'post',
//     url: '../elasticsearch/search_scroll',
//     data: query,
//     headers: {
//       Accept: 'application/json, text/plain, */*',
//       "kbn-xsrf": 'kibana'
//     }
//   }).catch((err)=>{
//     throw new Error("Scroll Search Error (See Console): <br\>" + err);
//   });
//   response = response1;
//   hits.push(...response.data.hits.hits);
//
//   while(true) {
//     let response2 = await axios({
//       method: 'post',
//       url: '../elasticsearch/search_scroll_id',
//       data: {
//         scroll_id: response.data._scroll_id
//       },
//       headers: {
//         Accept: 'application/json, text/plain, */*',
//         "kbn-xsrf": 'kibana'
//       }
//     }).catch((err)=>{
//       throw new Error("Search By Scroll ID Error (See Console): <br\>" + err);
//     });
//     response = response2;
//     if(response.data.hits.hits.length <= 0) break;
//     hits.push(...response.data.hits.hits);
//   }
//
//   if(hits.length < 1) {
//     throw new Error("No Data Found !!");
//   } else {
//     return hits;
//   }
// };